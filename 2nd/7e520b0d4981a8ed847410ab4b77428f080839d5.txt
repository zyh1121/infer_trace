#5915
libavcodec/cbs_h264_syntax_template.c:152: error: INTEGER_OVERFLOW_L5
  (32 - [0, +oo]):unsigned32 by call to `cbs_read_ue_golomb`.

libavcodec/cbs_h264_syntax_template.c:151:9: Call
149.     flag(chroma_loc_info_present_flag);
150.     if (current->chroma_loc_info_present_flag) {
151.         ue(chroma_sample_loc_type_top_field,    0, 5);
             ^
152.         ue(chroma_sample_loc_type_bottom_field, 0, 5);
153.     } else {

libavcodec/cbs_h2645.c:34:1: Parameter `bc->bits_left`
  32. 
  33. 
  34. static int cbs_read_ue_golomb(CodedBitstreamContext *ctx, BitstreamContext *bc,
      ^
  35.                               const char *name, uint32_t *write_to,
  36.                               uint32_t range_min, uint32_t range_max)

libavcodec/cbs_h264_syntax_template.c:152:9: Call
150.     if (current->chroma_loc_info_present_flag) {
151.         ue(chroma_sample_loc_type_top_field,    0, 5);
152.         ue(chroma_sample_loc_type_bottom_field, 0, 5);
             ^
153.     } else {
154.         infer(chroma_sample_loc_type_top_field,    0);

libavcodec/cbs_h2645.c:34:1: Parameter `bc->bits_left`
  32. 
  33. 
  34. static int cbs_read_ue_golomb(CodedBitstreamContext *ctx, BitstreamContext *bc,
      ^
  35.                               const char *name, uint32_t *write_to,
  36.                               uint32_t range_min, uint32_t range_max)

libavcodec/cbs_h2645.c:71:17: Call
  69.         ff_cbs_trace_syntax_element(ctx, position, name, bits, value);
  70.     } else {
  71.         value = get_ue_golomb_long(bc);
                      ^
  72.     }
  73. 

libavcodec/golomb.h:77:1: Parameter `bc->bits_left`
    75.  * Read an unsigned Exp-Golomb code in the range 0 to UINT32_MAX-1.
    76.  */
    77. static inline unsigned get_ue_golomb_long(BitstreamContext *bc)
        ^
    78. {
    79.     unsigned buf, log;

libavcodec/golomb.h:81:11: Call
    79.     unsigned buf, log;
    80. 
    81.     buf = bitstream_peek(bc, 32);
                  ^
    82.     log = 31 - av_log2(buf);
    83.     bitstream_skip(bc, log);

libavcodec/bitstream.h:214:1: Parameter `n`
      212. /* Return n bits from the buffer, but do not change the buffer state.
      213.  * n has to be in the 0-32 range. */
      214. static inline unsigned bitstream_peek(BitstreamContext *bc, unsigned n)
           ^
      215. {
      216.     if (n > bc->bits_left)

libavcodec/bitstream.h:217:9: Call
      215. {
      216.     if (n > bc->bits_left)
      217.         refill_32(bc);
                   ^
      218. 
      219.     return show_val(bc, n);

libavcodec/bitstream.h:59:1: <RHS trace>
57. }
58. 
59. static inline void refill_32(BitstreamContext *bc)
    ^
60. {
61.     if (bc->ptr >= bc->buffer_end)

libavcodec/bitstream.h:59:1: Parameter `bc->bits_left`
        57. }
        58. 
        59. static inline void refill_32(BitstreamContext *bc)
            ^
        60. {
        61.     if (bc->ptr >= bc->buffer_end)

libavcodec/bitstream.h:67:5: Binary operation: (32 - [0, +oo]):unsigned32 by call to `cbs_read_ue_golomb` 
        65.     bc->bits       = (uint64_t)AV_RL32(bc->ptr) << bc->bits_left | bc->bits;
        66. #else
        67.     bc->bits       = bc->bits | (uint64_t)AV_RB32(bc->ptr) << (32 - bc->bits_left);
                ^
        68. #endif
        69.     bc->ptr       += 4;
