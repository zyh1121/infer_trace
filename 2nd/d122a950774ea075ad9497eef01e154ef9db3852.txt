crypto/ec/ecp_smpl.c:1350: error: BUFFER_OVERRUN_L5
  Offset: [-oo, +oo] (⇐ [-oo, +oo] + [-oo, +oo]) Size: [0, +oo] by call to `BN_mod_add_quick`.
Showing all 14 steps of the trace


crypto/ec/ecp_smpl.c:1349:9: Call
1347.   		if (group->a_is_minus3)
1348.   			{
1349.   			if (!BN_mod_lshift1_quick(tmp2, tmp1, p)) goto err;
                ^
1350.   			if (!BN_mod_add_quick(tmp2, tmp2, tmp1, p)) goto err;
1351.   			if (!BN_mod_sub_quick(rh, rh, tmp2, p)) goto err;

crypto/bn/bn_mod.c:221:1: Parameter `a->top`
  219.   /* BN_mod_lshift1 variant that may be used if  a  is non-negative
  220.    * and less than  m */
  221. > int BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m)
  222.   	{
  223.   	if (!BN_lshift1(r, a)) return 0;

crypto/bn/bn_mod.c:223:7: Call
  221.   int BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m)
  222.   	{
  223.   	if (!BN_lshift1(r, a)) return 0;
               ^
  224.   	bn_check_top(r);
  225.   	if (BN_cmp(r, m) >= 0)

crypto/bn/bn_shift.c:63:1: Parameter `r->dmax`
    61.   #include "bn_lcl.h"
    62.   
    63. > int BN_lshift1(BIGNUM *r, const BIGNUM *a)
    64.   	{
    65.   	register BN_ULONG *ap,*rp,t,c;

crypto/ec/ecp_smpl.c:1350:9: Call
1348.   			{
1349.   			if (!BN_mod_lshift1_quick(tmp2, tmp1, p)) goto err;
1350.   			if (!BN_mod_add_quick(tmp2, tmp2, tmp1, p)) goto err;
                ^
1351.   			if (!BN_mod_sub_quick(rh, rh, tmp2, p)) goto err;
1352.   			}

crypto/bn/bn_mod.c:150:1: Parameter `r->top`
  148.   /* BN_mod_add variant that may be used if both  a  and  b  are non-negative
  149.    * and less than  m */
  150. > int BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m)
  151.   	{
  152.   	if (!BN_uadd(r, a, b)) return 0;

crypto/bn/bn_mod.c:152:7: Call
  150.   int BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m)
  151.   	{
  152.   	if (!BN_uadd(r, a, b)) return 0;
               ^
  153.   	if (BN_ucmp(r, m) >= 0)
  154.   		return BN_usub(r, r, m);

crypto/bn/bn_add.c:105:1: Parameter `r->top`
    103.   
    104.   /* unsigned add of b to a */
    105. > int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
    106.   	{
    107.   	int max,min,dif;

crypto/bn/bn_add.c:120:6: Call
    118.   	dif = max - min;
    119.   
    120.   	if (bn_wexpand(r,max+1) == NULL)
                ^
    121.   		return 0;
    122.   

crypto/bn/bn_lib.c:440:1: <Offset trace>
438.    * NULL is returned. If not, 'b' is returned. */
439.   
440. > BIGNUM *bn_expand2(BIGNUM *b, int words)
441.   	{
442.   	BN_ULONG *A;

crypto/bn/bn_lib.c:440:1: Parameter `words`
      438.    * NULL is returned. If not, 'b' is returned. */
      439.   
      440. > BIGNUM *bn_expand2(BIGNUM *b, int words)
      441.   	{
      442.   	BN_ULONG *A;

crypto/bn/bn_lib.c:440:1: <Length trace>
438.    * NULL is returned. If not, 'b' is returned. */
439.   
440. > BIGNUM *bn_expand2(BIGNUM *b, int words)
441.   	{
442.   	BN_ULONG *A;

crypto/bn/bn_lib.c:440:1: Parameter `*b->d`
      438.    * NULL is returned. If not, 'b' is returned. */
      439.   
      440. > BIGNUM *bn_expand2(BIGNUM *b, int words)
      441.   	{
      442.   	BN_ULONG *A;

crypto/bn/bn_lib.c:459:3: Array access: Offset: [-oo, +oo] (⇐ [-oo, +oo] + [-oo, +oo]) Size: [0, +oo] by call to `BN_mod_add_quick` 
      457.   	if (b->top < b->dmax)
      458.   		{
      459.   		A = &(b->d[b->top]);
               ^
      460.   		for (i=(b->dmax - b->top)>>3; i>0; i--,A+=8)
      461.   			{
