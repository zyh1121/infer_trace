crypto/asn1/tasn_typ.c:78: error: INTEGER_OVERFLOW_L5
  ([-oo, 0] - 1):signed32 by call to `ASN1_item_d2i`.
Showing all 19 steps of the trace


crypto/asn1/tasn_typ.c:78:1: Call
76.   
77.   IMPLEMENT_ASN1_TYPE(ASN1_NULL)
78. > IMPLEMENT_ASN1_FUNCTIONS(ASN1_NULL)
79.   
80.   IMPLEMENT_ASN1_TYPE(ASN1_OBJECT)

crypto/asn1/tasn_dec.c:90:1: Parameter `it->funcs->ref_lock`
  88.    */
  89.   
  90. > ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **pval, unsigned char **in, long len, const ASN1_ITEM *it)
  91.   {
  92.   	ASN1_TLC c;

crypto/asn1/tasn_dec.c:96:5: Call
  94.   	if(!pval) pval = &ptmpval;
  95.   	asn1_tlc_clear(&c);
  96.   	if(ASN1_item_ex_d2i(pval, in, len, it, -1, 0, 0, &c) > 0) 
            ^
  97.   		return *pval;
  98.   	return NULL;

crypto/asn1/tasn_dec.c:113:1: Parameter `it->funcs->ref_lock`
    111.    */
    112.   
    113. > int ASN1_item_ex_d2i(ASN1_VALUE **pval, unsigned char **in, long len, const ASN1_ITEM *it,
    114.   				int tag, int aclass, char opt, ASN1_TLC *ctx)
    115.   {

crypto/asn1/tasn_dec.c:389:2: Call
    387.   	ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_AUX_ERROR);
    388.   	err:
    389.   	ASN1_item_ex_free(pval, it);
            ^
    390.   	if(errtt) ERR_add_error_data(4, "Field=", errtt->field_name, ", Type=", it->sname);
    391.   	else ERR_add_error_data(2, "Type=", it->sname);

crypto/asn1/tasn_fre.c:74:1: Parameter `it->funcs->ref_lock`
      72.   }
      73.   
      74. > void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
      75.   {
      76.   	asn1_item_combine_free(pval, it, 0);

crypto/asn1/tasn_fre.c:76:2: Call
      74.   void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
      75.   {
      76.   	asn1_item_combine_free(pval, it, 0);
             ^
      77.   }
      78.   

crypto/asn1/tasn_fre.c:79:1: Parameter `it->funcs->ref_lock`
        77.   }
        78.   
        79. > static void asn1_item_combine_free(ASN1_VALUE **pval, const ASN1_ITEM *it, int combine)
        80.   {
        81.   	const ASN1_TEMPLATE *tt = NULL, *seqtt;

crypto/asn1/tasn_fre.c:134:6: Call
        132.   
        133.   		case ASN1_ITYPE_SEQUENCE:
        134.   		if(asn1_do_lock(pval, -1, it) > 0) return;
                    ^
        135.   		if(asn1_cb) {
        136.   			i = asn1_cb(ASN1_OP_FREE_PRE, pval, it);

crypto/asn1/tasn_utl.c:101:1: Parameter `it->funcs->ref_lock`
          99.    */
          100.   
          101. > int asn1_do_lock(ASN1_VALUE **pval, int op, const ASN1_ITEM *it)
          102.   {
          103.   	const ASN1_AUX *aux;

crypto/asn1/tasn_utl.c:113:8: Call
          111.   		return 1;
          112.   	}
          113.   	ret = CRYPTO_add(lck, op, aux->ref_lock);
                        ^
          114.   #ifdef REF_PRINT
          115.   	fprintf(stderr, "%s: Reference Count: %d\n", it->sname, *lck);

crypto/cryptlib.c:416:1: Parameter `type`
            414.   	}
            415.   
            416. > int CRYPTO_add_lock(int *pointer, int amount, int type, const char *file,
            417.   	     int line)
            418.   	{

crypto/cryptlib.c:439:3: Call
            437.   	else
            438.   		{
            439.   		CRYPTO_lock(CRYPTO_LOCK|CRYPTO_WRITE,type,file,line);
                     ^
            440.   
            441.   		ret= *pointer+amount;

crypto/cryptlib.c:373:1: Parameter `type`
              371.   	}
              372.   
              373. > void CRYPTO_lock(int mode, int type, const char *file, int line)
              374.   	{
              375.   #ifdef LOCK_DEBUG

crypto/cryptlib.c:400:3: Assignment
              398.   	if (type < 0)
              399.   		{
              400.   		int i = -type - 1;
                       ^
              401.   		struct CRYPTO_dynlock_value *pointer
              402.   			= CRYPTO_get_dynlock_value(i);

crypto/cryptlib.c:409:3: Call
              407.   			}
              408.   
              409.   		CRYPTO_destroy_dynlockid(i);
                       ^
              410.   		}
              411.   	else

crypto/cryptlib.c:221:1: <LHS trace>
219.   	}
220.   
221. > void CRYPTO_destroy_dynlockid(int i)
222.   	{
223.   	CRYPTO_dynlock *pointer = NULL;

crypto/cryptlib.c:221:1: Parameter `i`
                219.   	}
                220.   
                221. > void CRYPTO_destroy_dynlockid(int i)
                222.   	{
                223.   	CRYPTO_dynlock *pointer = NULL;

crypto/cryptlib.c:225:3: Binary operation: ([-oo, 0] - 1):signed32 by call to `ASN1_item_d2i` 
                223.   	CRYPTO_dynlock *pointer = NULL;
                224.   	if (i)
                225.   		i = -i-1;
                         ^
                226.   	if (dynlock_destroy_callback == NULL)
                227.   		return;
