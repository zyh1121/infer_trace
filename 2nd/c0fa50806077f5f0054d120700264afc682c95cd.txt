#3171
src/http/ngx_http_request.c:1151: error: Buffer Overrun L5
  Offset: [-oo, +oo] (⇐ [-oo, +oo] + [0, +oo]) Size: [0, +oo] by call to `ngx_http_process_request`.

src/http/ngx_http_request.c:1145:18: Call
1143.             r->http_state = NGX_HTTP_PROCESS_REQUEST_STATE;
1144. 
1145.             rc = ngx_http_process_request_header(r);
                       ^
1146. 
1147.             if (rc != NGX_OK) {

src/http/ngx_http_request.c:1570:1: Parameter `*r->main`
  1568. 
  1569. 
  1570. static ngx_int_t
        ^
  1571. ngx_http_process_request_header(ngx_http_request_t *r)
  1572. {

src/http/ngx_http_request.c:1580:9: Call
  1578.         ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
  1579.                    "client sent HTTP/1.1 request without \"Host\" header");
  1580.         ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
                ^
  1581.         return NGX_ERROR;
  1582.     }

src/http/ngx_http_request.c:2010:1: Parameter `*r->main`
    2008. 
    2009. 
    2010. void
          ^
    2011. ngx_http_finalize_request(ngx_http_request_t *r, ngx_int_t rc)
    2012. {

src/http/ngx_http_request.c:2065:13: Call
    2063.     {
    2064.         if (rc == NGX_HTTP_CLOSE) {
    2065.             ngx_http_terminate_request(r, rc);
                      ^
    2066.             return;
    2067.         }

src/http/ngx_http_request.c:2199:1: Parameter `*r->main`
      2197. 
      2198. 
      2199. static void
            ^
      2200. ngx_http_terminate_request(ngx_http_request_t *r, ngx_int_t rc)
      2201. {

src/http/ngx_http_request.c:2206:5: Assignment
      2204.     ngx_http_ephemeral_t  *e;
      2205. 
      2206.     mr = r->main;
                ^
      2207. 
      2208.     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,

src/http/ngx_http_request.c:2239:16: Call
      2237.         mr->posted_requests = NULL;
      2238.         mr->write_event_handler = ngx_http_terminate_handler;
      2239.         (void) ngx_http_post_request(mr, &e->terminal_posted_request);
                           ^
      2240.         return;
      2241.     }

src/http/ngx_http_request.c:1987:1: Parameter `*pr->request`
        1985. 
        1986. 
        1987. ngx_int_t
              ^
        1988. ngx_http_post_request(ngx_http_request_t *r, ngx_http_posted_request_t *pr)
        1989. {

src/http/ngx_http_request.c:1151:13: Call
1149.             }
1150. 
1151.             ngx_http_process_request(r);
                  ^
1152. 
1153.             return;

src/http/ngx_http_request.c:1637:1: Parameter `*r->main_conf`
  1635. 
  1636. 
  1637. static void
        ^
  1638. ngx_http_process_request(ngx_http_request_t *r)
  1639. {

src/http/ngx_http_request.c:1713:5: Call
  1711.     r->read_event_handler = ngx_http_block_reading;
  1712. 
  1713.     ngx_http_handler(r);
            ^
  1714. 
  1715.     ngx_http_run_posted_requests(c);

src/http/ngx_http_core_module.c:830:1: Parameter `*r->main_conf`
    828. 
    829. 
    830. void
         ^
    831. ngx_http_handler(ngx_http_request_t *r)
    832. {

src/http/ngx_http_core_module.c:871:5: Call
    869. 
    870.     r->write_event_handler = ngx_http_core_run_phases;
    871.     ngx_http_core_run_phases(r);
             ^
    872. }
    873. 

src/http/ngx_http_core_module.c:875:1: <Offset trace>
873. 
874. 
875. void
     ^
876. ngx_http_core_run_phases(ngx_http_request_t *r)
877. {

src/http/ngx_http_core_module.c:875:1: Global `ngx_http_core_module.ctx_index`
      873. 
      874. 
      875. void
           ^
      876. ngx_http_core_run_phases(ngx_http_request_t *r)
      877. {

src/http/ngx_http_core_module.c:875:1: <Length trace>
873. 
874. 
875. void
     ^
876. ngx_http_core_run_phases(ngx_http_request_t *r)
877. {

src/http/ngx_http_core_module.c:875:1: Parameter `*r->main_conf`
      873. 
      874. 
      875. void
           ^
      876. ngx_http_core_run_phases(ngx_http_request_t *r)
      877. {

src/http/ngx_http_core_module.c:882:12: Array access: Offset: [-oo, +oo] (⇐ [-oo, +oo] + [0, +oo]) Size: [0, +oo] by call to `ngx_http_process_request` 
      880.     ngx_http_core_main_conf_t  *cmcf;
      881. 
      882.     cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
                      ^
      883. 
      884.     ph = cmcf->phase_engine.handlers;
