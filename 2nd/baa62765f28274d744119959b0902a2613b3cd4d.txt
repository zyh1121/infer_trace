engines/ccgost/gost_sign.c:206: error: INTEGER_OVERFLOW_L5
  ([-1+min(0, `dsa->p->top`), -1+max(1, `dsa->p->top`)] × 64):signed32 by call to `BN_mod_exp`.
Showing all 22 steps of the trace


engines/ccgost/gost_sign.c:161:1: Parameter `dsa->p->top`
159.    */
160.   
161. > int gost_do_verify(const unsigned char *dgst, int dgst_len,
162.                      DSA_SIG *sig, DSA *dsa)
163.   {

engines/ccgost/gost_sign.c:204:5: Call
202.       BN_mod_mul(z1, sig->s, v, dsa->q, ctx);
203.       BN_sub(tmp, dsa->q, sig->r);
204.       BN_mod_mul(z2, tmp, v, dsa->p, ctx);
           ^
205.       BN_mod_exp(tmp, dsa->g, z1, dsa->p, ctx);
206.       BN_mod_exp(tmp2, dsa->pub_key, z2, dsa->p, ctx);

crypto/bn/bn_mod.c:179:1: Parameter `m->top`
  177.   
  178.   /* slow but works */
  179. > int BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
  180.                  BN_CTX *ctx)
  181.   {

engines/ccgost/gost_sign.c:205:5: Call
203.       BN_sub(tmp, dsa->q, sig->r);
204.       BN_mod_mul(z2, tmp, v, dsa->p, ctx);
205.       BN_mod_exp(tmp, dsa->g, z1, dsa->p, ctx);
           ^
206.       BN_mod_exp(tmp2, dsa->pub_key, z2, dsa->p, ctx);
207.       BN_mod_mul(tmp3, tmp, tmp2, dsa->p, ctx);

crypto/bn/bn_exp.c:191:1: Parameter `m->top`
  189.   }
  190.   
  191. > int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m,
  192.                  BN_CTX *ctx)
  193.   {

crypto/bn/bn_exp.c:243:9: Call
  241.       /* if ((m->d[m->top-1]&BN_TBIT) && BN_is_odd(m)) */
  242.   
  243.       if (BN_is_odd(m)) {
                 ^
  244.   # ifdef MONT_EXP_WORD
  245.           if (a->top == 1 && !a->neg

crypto/bn/bn_lib.c:912:1: Parameter `a->top`
    910.   }
    911.   
    912. > int BN_is_odd(const BIGNUM *a)
    913.   {
    914.       return (a->top > 0) && (a->d[0] & 1);

crypto/bn/bn_exp.c:248:19: Call
  246.               && (BN_get_flags(p, BN_FLG_CONSTTIME) == 0)) {
  247.               BN_ULONG A = a->d[0];
  248.               ret = BN_mod_exp_mont_word(r, A, p, m, ctx, NULL);
                           ^
  249.           } else
  250.   # endif

crypto/bn/bn_exp.c:1134:1: Parameter `m->top`
    1132.   }
    1133.   
    1134. > int BN_mod_exp_mont_word(BIGNUM *rr, BN_ULONG a, const BIGNUM *p,
    1135.                            const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont)
    1136.   {

engines/ccgost/gost_sign.c:206:5: Call
204.       BN_mod_mul(z2, tmp, v, dsa->p, ctx);
205.       BN_mod_exp(tmp, dsa->g, z1, dsa->p, ctx);
206.       BN_mod_exp(tmp2, dsa->pub_key, z2, dsa->p, ctx);
           ^
207.       BN_mod_mul(tmp3, tmp, tmp2, dsa->p, ctx);
208.       BN_mod(u, tmp3, dsa->q, ctx);

crypto/bn/bn_exp.c:191:1: Parameter `m->top`
  189.   }
  190.   
  191. > int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m,
  192.                  BN_CTX *ctx)
  193.   {

crypto/bn/bn_exp.c:243:9: Call
  241.       /* if ((m->d[m->top-1]&BN_TBIT) && BN_is_odd(m)) */
  242.   
  243.       if (BN_is_odd(m)) {
                 ^
  244.   # ifdef MONT_EXP_WORD
  245.           if (a->top == 1 && !a->neg

crypto/bn/bn_lib.c:912:1: Parameter `a->top`
    910.   }
    911.   
    912. > int BN_is_odd(const BIGNUM *a)
    913.   {
    914.       return (a->top > 0) && (a->d[0] & 1);

crypto/bn/bn_exp.c:256:15: Call
  254.   #ifdef RECP_MUL_MOD
  255.       {
  256.           ret = BN_mod_exp_recp(r, a, p, m, ctx);
                       ^
  257.       }
  258.   #else

crypto/bn/bn_exp.c:268:1: Parameter `m->top`
    266.   }
    267.   
    268. > int BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
    269.                       const BIGNUM *m, BN_CTX *ctx)
    270.   {

crypto/bn/bn_exp.c:306:13: Call
    304.               goto err;
    305.       } else {
    306.           if (BN_RECP_CTX_set(&recp, m, ctx) <= 0)
                       ^
    307.               goto err;
    308.       }

crypto/bn/bn_recp.c:93:1: Parameter `d->top`
      91.   }
      92.   
      93. > int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *d, BN_CTX *ctx)
      94.   {
      95.       if (!BN_copy(&(recp->N), d))

crypto/bn/bn_recp.c:98:22: Call
      96.           return 0;
      97.       BN_zero(&(recp->Nr));
      98.       recp->num_bits = BN_num_bits(d);
                                  ^
      99.       recp->shift = 0;
      100.       return (1);

crypto/bn/bn_lib.c:214:1: <LHS trace>
212.   }
213.   
214. > int BN_num_bits(const BIGNUM *a)
215.   {
216.       int i = a->top - 1;

crypto/bn/bn_lib.c:214:1: Parameter `a->top`
        212.   }
        213.   
        214. > int BN_num_bits(const BIGNUM *a)
        215.   {
        216.       int i = a->top - 1;

crypto/bn/bn_lib.c:216:5: Assignment
        214.   int BN_num_bits(const BIGNUM *a)
        215.   {
        216.       int i = a->top - 1;
                   ^
        217.       bn_check_top(a);
        218.   

crypto/bn/bn_lib.c:221:5: Binary operation: ([-1+min(0, dsa->p->top), -1+max(1, dsa->p->top)] × 64):signed32 by call to `BN_mod_exp` 
        219.       if (BN_is_zero(a))
        220.           return 0;
        221.       return ((i * BN_BITS2) + BN_num_bits_word(a->d[i]));
                   ^
        222.   }
        223.   
