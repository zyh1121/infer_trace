test/bntest.c:1148: error: BUFFER_OVERRUN_L3
  Offset: [1, +oo] Size: [0, 8388607] by call to `BN_div`.
Showing all 15 steps of the trace


test/bntest.c:1144:17: Call
1142.   
1143.       if (!TEST_true(BN_set_word(two, 2))
1144.               || !TEST_true(BN_add(ret, a, a))
                        ^
1145.               || !equalBN("A + A", lshift1, ret)
1146.               || !TEST_true(BN_mul(ret, a, two, ctx))

crypto/bn/bn_add.c:28:19: Call
  26.           if (cmp_res > 0) {
  27.               r_neg = a->neg;
  28.               ret = BN_usub(r, a, b);
                          ^
  29.           } else if (cmp_res < 0) {
  30.               r_neg = b->neg;

crypto/bn/bn_add.c:125:1: Parameter `r->top`
    123.   
    124.   /* unsigned subtraction of b from a, a must be larger than b. */
    125. > int BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
    126.   {
    127.       int max, min, dif;

test/bntest.c:1148:17: Call
1146.               || !TEST_true(BN_mul(ret, a, two, ctx))
1147.               || !equalBN("A * 2", lshift1, ret)
1148.               || !TEST_true(BN_div(ret, remainder, lshift1, two, ctx))
                        ^
1149.               || !equalBN("LShift1 / 2", a, ret)
1150.               || !equalBN("LShift1 % 2", zero, remainder)

crypto/bn/bn_div.c:188:1: Parameter `num->top`
  186.    * If 'dv' or 'rm' is NULL, the respective value is not returned.
  187.    */
  188. > int BN_div(BIGNUM *dv, BIGNUM *rm, const BIGNUM *num, const BIGNUM *divisor,
  189.              BN_CTX *ctx)
  190.   {

crypto/bn/bn_div.c:255:11: Call
  253.       sdiv->neg = 0;
  254.       norm_shift += BN_BITS2;
  255.       if (!(BN_lshift(snum, num, norm_shift)))
                   ^
  256.           goto err;
  257.       snum->neg = 0;

crypto/bn/bn_shift.c:83:1: <Offset trace>
81.   }
82.   
83. > int BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
84.   {
85.       int i, nw, lb, rb;

crypto/bn/bn_shift.c:83:1: Parameter `n`
    81.   }
    82.   
    83. > int BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
    84.   {
    85.       int i, nw, lb, rb;

crypto/bn/bn_shift.c:97:5: Assignment
    95.       }
    96.   
    97.       nw = n / BN_BITS2;
               ^
    98.       if (bn_wexpand(r, a->top + nw + 1) == NULL)
    99.           return 0;

crypto/bn/bn_shift.c:83:1: <Length trace>
81.   }
82.   
83. > int BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
84.   {
85.       int i, nw, lb, rb;

crypto/bn/bn_shift.c:83:1: Parameter `*r->d`
    81.   }
    82.   
    83. > int BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
    84.   {
    85.       int i, nw, lb, rb;

crypto/bn/bn_shift.c:98:9: Call
    96.   
    97.       nw = n / BN_BITS2;
    98.       if (bn_wexpand(r, a->top + nw + 1) == NULL)
                   ^
    99.           return 0;
    100.       r->neg = a->neg;

crypto/bn/bn_lib.c:939:1: Parameter `*a->d`
      937.   }
      938.   
      939. > BIGNUM *bn_wexpand(BIGNUM *a, int words)
      940.   {
      941.       return (words <= a->dmax) ? a : bn_expand2(a, words);

crypto/bn/bn_shift.c:104:5: Assignment
    102.       rb = BN_BITS2 - lb;
    103.       f = a->d;
    104.       t = r->d;
               ^
    105.       t[a->top + nw] = 0;
    106.       if (lb == 0)

crypto/bn/bn_shift.c:112:13: Array access: Offset: [1, +oo] Size: [0, 8388607] by call to `BN_div` 
    110.           for (i = a->top - 1; i >= 0; i--) {
    111.               l = f[i];
    112.               t[nw + i + 1] |= (l >> rb) & BN_MASK2;
                       ^
    113.               t[nw + i] = (l << lb) & BN_MASK2;
    114.           }
