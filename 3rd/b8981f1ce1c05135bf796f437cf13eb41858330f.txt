test/bntest.c:446: error: BUFFER_OVERRUN_L3
  Offset added: [8, +oo] Size: [0, 67108856] by call to `BN_rand`.
Showing all 25 steps of the trace


test/bntest.c:447:9: Call
445.       for (i = 0; i < NUM0; i++) {
446.           BN_rand(a, 512, 0, 0);
447.           BN_copy(b, BN_value_one());
               ^
448.           a->neg = rand_neg();
449.           b->neg = rand_neg();

crypto/bn/bn_lib.c:323:1: Parameter `a->top`
  321.   }
  322.   
  323. > BIGNUM *BN_copy(BIGNUM *a, const BIGNUM *b)
  324.   {
  325.       bn_check_top(b);

test/bntest.c:446:9: Call
444.   
445.       for (i = 0; i < NUM0; i++) {
446.           BN_rand(a, 512, 0, 0);
               ^
447.           BN_copy(b, BN_value_one());
448.           a->neg = rand_neg();

crypto/bn/bn_rand.c:97:1: Parameter `rnd->top`
  95.   }
  96.   
  97. > int BN_rand(BIGNUM *rnd, int bits, int top, int bottom)
  98.   {
  99.       return bnrand(NORMAL, rnd, bits, top, bottom);

crypto/bn/bn_rand.c:99:12: Call
  97.   int BN_rand(BIGNUM *rnd, int bits, int top, int bottom)
  98.   {
  99.       return bnrand(NORMAL, rnd, bits, top, bottom);
                    ^
  100.   }
  101.   

crypto/bn/bn_rand.c:21:1: Parameter `rnd->top`
    19.   } BNRAND_FLAG;
    20.   
    21. > static int bnrand(BNRAND_FLAG flag, BIGNUM *rnd, int bits, int top, int bottom)
    22.   {
    23.       unsigned char *buf = NULL;

crypto/bn/bn_rand.c:29:9: Call
    27.           if (top != BN_RAND_TOP_ANY || bottom != BN_RAND_BOTTOM_ANY)
    28.               goto toosmall;
    29.           BN_zero(rnd);
                  ^
    30.           return 1;
    31.       }

crypto/bn/bn_lib.c:398:1: Parameter `a->top`
      396.   }
      397.   
      398. > int BN_set_word(BIGNUM *a, BN_ULONG w)
      399.   {
      400.       bn_check_top(a);

crypto/bn/bn_lib.c:401:9: Call
      399.   {
      400.       bn_check_top(a);
      401.       if (bn_expand(a, (int)sizeof(BN_ULONG) * 8) == NULL)
                     ^
      402.           return (0);
      403.       a->neg = 0;

crypto/bn/bn_lcl.h:658:1: Parameter `a->top`
        656.                            const BIGNUM *add, const BIGNUM *rem, BN_CTX *ctx);
        657.   
        658. > static ossl_inline BIGNUM *bn_expand(BIGNUM *a, int bits)
        659.   {
        660.       if (bits > (INT_MAX - BN_BITS2 + 1))

crypto/bn/bn_lcl.h:666:12: Call
        664.           return a;
        665.   
        666.       return bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2);
                          ^
        667.   }
        668.   

crypto/bn/bn_lib.c:284:1: Parameter `b->top`
          282.    */
          283.   
          284. > BIGNUM *bn_expand2(BIGNUM *b, int words)
          285.   {
          286.       bn_check_top(b);

crypto/bn/bn_lib.c:289:23: Call
          287.   
          288.       if (words > b->dmax) {
          289.           BN_ULONG *a = bn_expand_internal(b, words);
                                       ^
          290.           if (!a)
          291.               return NULL;

crypto/bn/bn_lib.c:246:1: <Offset trace>
244.   /* This is used by bn_expand2() */
245.   /* The caller MUST check that words > b->dmax before calling this */
246. > static BN_ULONG *bn_expand_internal(const BIGNUM *b, int words)
247.   {
248.       BN_ULONG *a = NULL;

crypto/bn/bn_lib.c:246:1: Parameter `b->top`
            244.   /* This is used by bn_expand2() */
            245.   /* The caller MUST check that words > b->dmax before calling this */
            246. > static BN_ULONG *bn_expand_internal(const BIGNUM *b, int words)
            247.   {
            248.       BN_ULONG *a = NULL;

crypto/bn/bn_lib.c:246:1: <Length trace>
244.   /* This is used by bn_expand2() */
245.   /* The caller MUST check that words > b->dmax before calling this */
246. > static BN_ULONG *bn_expand_internal(const BIGNUM *b, int words)
247.   {
248.       BN_ULONG *a = NULL;

crypto/bn/bn_lib.c:246:1: Parameter `words`
            244.   /* This is used by bn_expand2() */
            245.   /* The caller MUST check that words > b->dmax before calling this */
            246. > static BN_ULONG *bn_expand_internal(const BIGNUM *b, int words)
            247.   {
            248.       BN_ULONG *a = NULL;

crypto/bn/bn_lib.c:263:13: Call
            261.           a = OPENSSL_secure_zalloc(words * sizeof(*a));
            262.       else
            263.           a = OPENSSL_zalloc(words * sizeof(*a));
                               ^
            264.       if (a == NULL) {
            265.           BNerr(BN_F_BN_EXPAND_INTERNAL, ERR_R_MALLOC_FAILURE);

crypto/mem.c:198:1: Parameter `num`
              196.   }
              197.   
              198. > void *CRYPTO_zalloc(size_t num, const char *file, int line)
              199.   {
              200.       void *ret = CRYPTO_malloc(num, file, line);

crypto/mem.c:200:17: Call
              198.   void *CRYPTO_zalloc(size_t num, const char *file, int line)
              199.   {
              200.       void *ret = CRYPTO_malloc(num, file, line);
                                     ^
              201.   
              202.       FAILTEST();

crypto/mem.c:178:9: Assignment
                176.   
                177.       if (num == 0)
                178.           return NULL;
                               ^
                179.   
                180.       FAILTEST();

crypto/mem.c:200:5: Assignment
              198.   void *CRYPTO_zalloc(size_t num, const char *file, int line)
              199.   {
              200.       void *ret = CRYPTO_malloc(num, file, line);
                         ^
              201.   
              202.       FAILTEST();

crypto/mem.c:205:5: Assignment
              203.       if (ret != NULL)
              204.           memset(ret, 0, num);
              205.       return ret;
                         ^
              206.   }
              207.   

crypto/bn/bn_lib.c:263:9: Assignment
            261.           a = OPENSSL_secure_zalloc(words * sizeof(*a));
            262.       else
            263.           a = OPENSSL_zalloc(words * sizeof(*a));
                           ^
            264.       if (a == NULL) {
            265.           BNerr(BN_F_BN_EXPAND_INTERNAL, ERR_R_MALLOC_FAILURE);

crypto/bn/bn_lib.c:271:9: Array access: Offset added: [8, +oo] Size: [0, 67108856] by call to `BN_rand` 
            269.       assert(b->top <= words);
            270.       if (b->top > 0)
            271.           memcpy(a, b->d, sizeof(*a) * b->top);
                           ^
            272.   
            273.       return a;
